/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ksu.mailnoti.start;

import com.ksu.mailnoti.start.irispen.IRISPenPanel;
import com.ksu.mailnoti.ui.util.BorderPanel;
import com.ksu.mailnoti.ui.util.html.StyledTextArea;
import java.awt.Dimension;
import java.awt.GraphicsDevice;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import org.openimaj.video.VideoDisplay;

/**
 *
 * @author Hamdi
 */
public class ExtractTextPanel extends BorderPanel {
    protected ImageIcon bgImageI = new ImageIcon("icons/Default.jpg");
    ImageIcon gridImg = new ImageIcon("icons/camera/cameraWindow - 2.1.png");        

    public final BorderPanel cameraPanel;   
    private JComponent videoImageComponent;
    public final IRISPenPanel irisPenPanel;
    public StyledTextArea extractedTextArea ;   

    public ExtractTextPanel(StartPanel parentPanel/*, JComponent videoImageComponent*/) {
        initComponents();
        //this.videoImageComponent = videoImageComponent;
        
        setImage(gridImg);                 
        GraphicsDevice screen = java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        setMinimumSize(new Dimension( (screen.getDisplayMode().getWidth()-200)/2,  600));
        setPreferredSize(new Dimension( (screen.getDisplayMode().getWidth()-200)/2,   screen.getDisplayMode().getHeight()));
        setMaximumSize(new Dimension( (screen.getDisplayMode().getWidth()-200)/2,   10000));    
             
        cameraPanel = new BorderPanel();
        cameraPanel.remove(0);
        cameraPanel.add(this.innerPanel);
        extPanel2.add(cameraPanel);
        
        irisPenPanel = new IRISPenPanel(parentPanel);      
        extPanel3.add(irisPenPanel); 
        
                
        new StyledTextArea(1, null);       
        extractedTextArea = new StyledTextArea(1, null);
        extractedTextArea.createHTMLTable(1, "inputfrompen", "inputfrompen");  
        extPanel4.add(extractedTextArea);
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        extPanel2 = new javax.swing.JPanel();
        extPanel3 = new javax.swing.JPanel();
        extPanel4 = new javax.swing.JPanel();

        extPanel2.setBackground(new java.awt.Color(153, 255, 51));
        extPanel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        extPanel2.setLayout(new java.awt.GridLayout(1, 0));

        extPanel3.setBackground(new java.awt.Color(204, 204, 255));
        extPanel3.setLayout(new java.awt.GridLayout());

        extPanel4.setBackground(new java.awt.Color(51, 51, 255));
        extPanel4.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(extPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
            .addComponent(extPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(extPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(extPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel extPanel2;
    private javax.swing.JPanel extPanel3;
    private javax.swing.JPanel extPanel4;
    // End of variables declaration//GEN-END:variables
     
    
    @Override
    public void  paintComponent(java.awt.Graphics g){
        super.paintComponent(g);
    }
    
    public void activateCamera(JComponent videoImageComponent){
        this.videoImageComponent = videoImageComponent;
        cameraPanel.remove(this.innerPanel);
        cameraPanel.add(videoImageComponent); 
    }
    
    /*public void activateCamera(){
        cameraPanel.remove(this.innerPanel);
        cameraPanel.add(videoImageComponent);   
    }*/  
    
    public void deactivateCamera(){
        if(videoImageComponent != null){
            cameraPanel.remove(videoImageComponent);
            cameraPanel.add(this.innerPanel);  
        }
    }    
    
    

//    public void actionPerformed(ActionEvent e) {
//        if(e.getSource().equals(activationButtons.camButton)){            
//                if(cameraModePanel.videoPanel.isStarted()){
//                    cameraModePanel.webcamPanel.stop();
//                    cameraPanel.remove(cameraModePanel);
//                    cameraPanel.add(this.innerPanel);
//                    ((JButton)e.getSource()).setText("Activate Camera");
//                    
//                    
//                }else{
//                    
//                    cameraModePanel.webcamPanel.start();
//                    cameraPanel.remove(this.innerPanel);
//                    cameraPanel.add(cameraModePanel);
//                    ((JButton)e.getSource()).setText("Deactivate Camera");
//                    
//                }
//                
//        }else if(e.getSource().equals(activationButtons.penButton)){
//            if(irisPenPanel.irisPenInputArea.isEnabled()){
//                //irisPenPanel.irisPenInputArea.setEditable(false);
//                ((JButton)e.getSource()).setText("Activate OpticalPen");
//
//            }else{
//                //irisPenPanel.irisPenInputArea.setEditable(true);
//                ((JButton)e.getSource()).setText("Deactivate OpticalPen");
//            }            
//        }
//   }
}
